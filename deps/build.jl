using BinaryProvider 

dependencies = [
    "https://github.com/juan-pablo-vielma/OsiBuilder/releases/download/v0.107.9-beta/build_OsiBuilder.v0.107.9.jl",
    "https://github.com/juan-pablo-vielma/CoinUtilsBuilder/releases/download/v2.10.14-beta2/build_CoinUtilsBuilder.v2.10.14.jl",
    "https://github.com/juan-pablo-vielma/COINGLPKBuilder/releases/download/v1.10.5-beta4/build_COINGLPKBuilder.v1.10.5.jl",
    "https://github.com/juan-pablo-vielma/COINMumpsBuilder/releases/download/v1.6.0-beta/build_COINMumpsBuilder.v1.6.0.jl",
    "https://github.com/juan-pablo-vielma/COINMetisBuilder/releases/download/v1.3.5-beta/build_COINMetisBuilder.v1.3.5.jl",
    "https://github.com/juan-pablo-vielma/COINLapackBuilder/releases/download/v1.5.6-beta/build_COINLapackBuilder.v1.5.6.jl",
    "https://github.com/juan-pablo-vielma/COINBLASBuilder/releases/download/v1.4.6-beta2/build_COINBLASBuilder.v1.4.6.jl" 
]

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libOsiClp"], :libOsiClp),
    LibraryProduct(prefix, String["libClp"], :libClp),
    LibraryProduct(prefix, String["libClpSolver"], :libClpSolver),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/ClpBuilder/releases/download/v1.16.11-beta"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ClpBuilder.v1.16.11.aarch64-linux-gnu.tar.gz", "8dd14d6149933cd7c989a2b71711ecef39cf578229ed0c05174114902fc89259"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ClpBuilder.v1.16.11.arm-linux-gnueabihf.tar.gz", "68e6400ffb69717cfd421876b8e376378bee7d0fa714d6d5b13a5bf4f68b5d6a"),
    Linux(:i686, :glibc) => ("$bin_prefix/ClpBuilder.v1.16.11.i686-linux-gnu.tar.gz", "f24960b4e00e13ecc0d0eb1ae3332d606c2f7c62e7f14df55096ddeaec94822d"),
    Windows(:i686) => ("$bin_prefix/ClpBuilder.v1.16.11.i686-w64-mingw32.tar.gz", "538d158389d70eab44ac4481119d5712de940452a4aa9d0b8f36d141285e4b00"),
    MacOS(:x86_64) => ("$bin_prefix/ClpBuilder.v1.16.11.x86_64-apple-darwin14.tar.gz", "0197c7100870427a652ced8a3954ae6acac9f65bba4b81cad4747c3bf28801b4"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/ClpBuilder.v1.16.11.x86_64-linux-gnu.tar.gz", "cd5c66ab1375219037b78e0b189c4491c613515c6831e8918663369362f9c47d"),
    Windows(:x86_64) => ("$bin_prefix/ClpBuilder.v1.16.11.x86_64-w64-mingw32.tar.gz", "aa48ab4ba27cee81589a601e6ce7bbae28b504d7388a48c2c0f5250074f1da8c"),
)

# Install unsatisfied or updated dependencies:                    
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    # Check if this build.jl is providing new versions of the binaries, and
    # if so, ovewrite the current binaries even if they were installed by the user 
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix) 
        # Download and install binaries
        for dependency in reverse(dependencies)          # We do not check for already installed dependencies
            download(dependency,basename(dependency))
            evalfile(basename(dependency))
        end                            
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
